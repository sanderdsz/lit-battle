{"version":3,"file":"index.js","sourceRoot":"","sources":["src/index.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE1D;;;;;;GAMG;AAEI,IAAM,KAAK,GAAX,MAAM,KAAM,SAAQ,UAAU;IAA9B;;QAUL;;WAEG;QAEH,SAAI,GAAG,OAAO,CAAC;QAEf;;WAEG;QAEH,UAAK,GAAG,CAAC,CAAC;IAwBZ,CAAC;IAtBU,MAAM;QACb,OAAO,IAAI,CAAA;YACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;uBACb,IAAI,CAAC,QAAQ;yBACX,IAAI,CAAC,KAAK;;;KAG9B,CAAC;IACJ,CAAC;IAEO,QAAQ;QACd,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;IACvD,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,IAAY;QACnB,OAAO,UAAU,IAAI,EAAE,CAAC;IAC1B,CAAC;;AA1Ce,YAAM,GAAG,GAAG,CAAA;;;;;;;GAO3B,AAPqB,CAOpB;AAMF;IADC,QAAQ,EAAE;mCACI;AAMf;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;oCACf;AApBC,KAAK;IADjB,aAAa,CAAC,eAAe,CAAC;GAClB,KAAK,CA4CjB","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n * SPDX-License-Identifier: BSD-3-Clause\r\n */\r\n\r\nimport {LitElement, html, css} from 'lit';\r\nimport {customElement, property} from 'lit/decorators.js';\r\n\r\n/**\r\n * An example element.\r\n *\r\n * @fires count-changed - Indicates when the count changes\r\n * @slot - This element has a slot\r\n * @csspart button - The button\r\n */\r\n@customElement('index-element')\r\nexport class Index extends LitElement {\r\n  static override styles = css`\r\n    :host {\r\n      display: block;\r\n      border: solid 1px gray;\r\n      padding: 16px;\r\n      max-width: 800px;\r\n    }\r\n  `;\r\n\r\n  /**\r\n   * The name to say \"Hello\" to.\r\n   */\r\n  @property()\r\n  name = 'World';\r\n\r\n  /**\r\n   * The number of times the button has been clicked.\r\n   */\r\n  @property({type: Number})\r\n  count = 0;\r\n\r\n  override render() {\r\n    return html`\r\n      <h1>${this.sayHello(this.name)}!</h1>\r\n      <button @click=${this._onClick} part=\"button\">\r\n        Click Counter: ${this.count}\r\n      </button>\r\n      <slot></slot>\r\n    `;\r\n  }\r\n\r\n  private _onClick() {\r\n    this.count++;\r\n    this.dispatchEvent(new CustomEvent('count-changed'));\r\n  }\r\n\r\n  /**\r\n   * Formats a greeting\r\n   * @param name The name to say \"Hello\" to\r\n   */\r\n  sayHello(name: string): string {\r\n    return `Hello, ${name}`;\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'index-element': Index;\r\n  }\r\n}"]}